" vim: filetype=vim :
" #########################################################
" ##########           VIFMRC by smy       #################
" #########################################################
"------Setup-----------------{{{
" always ignore case of characters for f/F/;/,
set caseoptions=g

" delete files without confirmation
set confirm=""

" show size of directories
set dirsize=size

" hide .. directory everywhere
set dotdirs=

" show dotfiles
set dotfiles

" allow partially entered external commands with unambiguous beginning using :!
set fastrun

" how many directories to store in all kinds of history
set history=1000

" ignore case in search pattern unless it contains at least one uppercase letter
set ignorecase
set smartcase

" use increment searching and filtering (search/filter while typing)
set incsearch

" follow links on l or Enter automatically, not just navigate to target!!!!!!
set nofollowlinks

" don't highlight search results automatically
set nohlsearch

" don't wrap long lines in preview pane
set nowrap

" show lines numbers
set number

set relativenumber

" custom ruler format
set rulerformat='%2l-%S%[ +%x%]'

" allow automatic runing of executable files
set runexec

" try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" natural sort of (version) numbers within filenames
set sortnumbers

" show suggestions
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" perform file operations via system calls
set syscalls

" expand tabulation characters as two spaces
set tabstop=2

" format for displaying time
set timefmt="%y/%m/%d %H:%M"

" update terminal title
set title

" use trash directory per mount point, fallback to ~/.vifm-trash
set trashdir=%r/.vifm-trash,$HOME/.vifm-trash

" maximum number of changes that can be undone.
set undolevels=100

" use vim's documentation system for :help command
" set vimhelp

" What should be saved automatically between vifm sessions.  
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" show list of matches on tab complition in command-line mode
set wildmenu

" use popup window instead of a single line for completion
set wildstyle=popup

" Don't do too many requests to slow file systems!!!!!!!
if !has('win')
    set slowfs=curlftpfs
endif

" mount FUSE file-systems here!!!!!!!!!!
set fusehome=~/.vifm/.fuse

" ignore .git directory on :find
set findprg='find %s %a -print ,
            \ -type d \( ! -readable -o ! -executable -o -path "*/.git" \)
            \ -prune'
" How to indicate that shell session is running inside Vifm
let $INSIDE_VIFM = 'true'

"Openign file in vim
" set vicmd=vim
set vicmd="urxvt -e vim $VIMARGS --remote-tab-silent &"
" set vicmd=vim &

"}}}
"----Appearance--{{{
" themes, highlighting

" List of color schemes to try (picks the first one supported by the terminal)
colorscheme solarized-light-256 Default-256 Default

"devicons from vim
source ~/.config/vifm/favicons.vifm

"Each flag configures some aspect of TUI appearance. s - left/rigth borders
set tuioptions="pv"

" change appearance of middle border
" set fillchars=vborder:В·

" Customize view columns a bit (enable ellipsis for truncated file names)
" * - long name - from end
" - - long name - from start
" .. - cut name with ...
" . - just cut name
" no dot - full name
set viewcolumns=-{name}..,6{}.
" show files count if dirs
" set viewcolumns=-{name},{nitems},6{}.

"}}}
"----Status line ----{{{


" nesting detection
if $INSIDE_VIFM != ''
    let $SL_PREFIX = 'vifm '
else
    if $PS1 != ''
        let $SL_PREFIX = 'bash '
    endif
    let $INSIDE_VIFM = 'true'
endif
let &statusline = ''
if $SL_PREFIX != ''
	let &statusline = '%2*'.$SL_PREFIX.'%4*'
endif
let &statusline .= '%1*'           " left separator
let &statusline .= ' %t '          " file name
let &statusline .= ''             " left separator
let &statusline .= '%='            " fill the whole status line
let &statusline .= ''             " right separator
let &statusline .= ' %A '		   " file attributes & user and group owners of the file
let &statusline .= ' %[%u:%g%] '   " user and group owners of the file
let &statusline .= '%4*%2*'       " right separator
let &statusline .= ' %E '          " human readable cumulative file size of SELECTED files
let &statusline .= '%3*%1*'       " right separator
let &statusline .= ' %-s '         " human readable cumulative file size
let &statusline .= '%4*%2*'       " right separator
let &statusline .= ' %d '          " file modification date and time
let &statusline .= '%3*%1*'       " right separator
let &statusline .= ' %a '          " free space available at current partition

""show number of files hidden by filters, only if filter had been applied
set statusline+='%[ +%x%]'

"}}}
"----Marks----------------{{{
" :mark mark /full/directory/path [filename]

mark 0 ~/.steam/steam/steamapps/common/
mark 1 ~/Documents
mark 2 ~/Dropbox
mark 3 ~/Media/t_done/
mark 4 ~/.ssh
mark 5 ~/.ansible
mark 6 ~/.cache
mark 7 ~/.scripts
mark 8 ~/DiskD
mark 9 ~/DiskE
mark A ~/.ansible
mark B ~/Backup
mark C ~/.config
mark D ~/Documents
mark F ~/Foto
mark G ~/Git_work
mark L ~/Learn
mark M ~/Music
mark P ~/Phone
mark R ~/Recordings
mark S ~/Share
mark T ~/Downloads/t_done
mark V ~/Vagrant
mark W ~/Work_smy
mark a ~/Music/audiobooks
mark b ~/Books
mark c ~/Media/home/comics
mark d ~/Downloads
mark e /etc
mark f ~/Foto
mark g ~/Git_smy
mark h ~/
mark i ~/Knowledge/!IT_articles
mark j ~/Knowledge/japan,anime,manga
mark k ~/Knowledge
mark l ~/Dropbox/Look.out.for.them.all
mark m ~/Magazine
mark n ~/Dropbox/Vimwiki
mark o ~/Mounted
mark p ~/Pictures
mark r ~/Work/tasks
mark s ~/Stuff
mark t ~/Temp
mark u /usr/share
mark v ~/Videos
mark w ~/Work
mark x ~/.config/vifm
mark y ~/Media/home
mark z ~/.vim

" }}}
" ----Commands------------------{{{
"  source bash alias, first must create with bash_alias_to_vifm_commands.sh
so ~/.config/vifm/vifm_aliases
" silently extract selected archives in background
" command extract aunpack -e %f &>/dev/null &
" unpack selected archivers
command extract aunpack %f &>/dev/null &
" archive the selection with :archive <filename.ext>
command archive apack %a %f &>/dev/null &
"git alias config for dotfile-git manipulation
command! config /usr/bin/git --git-dir=$HOME/.myconf/ --work-tree=$HOME %a %S
command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
"execute command for each selected file
" usage - %foreach echo "$f"
command! foreach for f in %f; do %a; done
" run make in current directory
command! make !!make %a
" creates directory and immediately enters it
command! mkcd :mkdir %a | cd %a
command! mounts /bin/lsblk -no MOUNTPOINT|sed '/^$/d'|sed '/\[SWAP\]/d'|sort|uniq %M
command! link ln -s %d/%f %D
command! print lp -n 1 -o sides=two-sided-long-edge %f
command! reload :write | restart full
" run script
command! run !! ./%f
" a sanitation command that would replace all spaces and various OS's reserved
" characters from file names and directory names?
command! sanitize :tr/ ?<>\\:*|"/__________
command! targetm :let $VIMARGS = '--servername MAIN'
command! target :let $VIMARGS = '--servername "%a"'
command! vgrep vim "+grep %a"
command! zip zip -r %f.zip %f
command! mpvop find . -type f \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.avi" -o -iname "*.webm" -o -iname "*.mov" -o -iname "*.flv" -o -name "*.m4v" \) -exec mpv {} + &

"search files with plocate
" variation that automatically enters directories
command! fzflocate : set noquickview
                  \| let $FZF_PICK = term('locate $HOME | fzf --height 30 2>/dev/tty')
                  \| if $FZF_PICK != ''
                  \|     execute system('[ -f "$FZF_PICK" ] && echo goto || echo cd') fnameescape($FZF_PICK)
                  \| endif
"search files with fd
command! fzffind : set noquickview
                \| let $FZF_PICK = term('fd | fzf --height 30 2>/dev/tty')
                \| if $FZF_PICK != ''
                \|     execute 'goto' fnameescape($FZF_PICK)
                \| endif
"search dir with fd & enter it
command! fzfcd : let $FZF_RES = term('fd --type d . %a --hidden --exclude .git | fzf 2> /dev/tty')
              \| if $FZF_RES != ''
              \|     execute 'cd' fnameescape($FZF_RES)
              \| endif
"search in text files with rg
command! fzfinfiles :let $FZF_PICK = term('fzfsearchtextfiles.sh %a 2>/dev/tty')
                   \| if $FZF_PICK != ''
                   \|     execute 'goto' fnameescape($FZF_PICK)
                   \| endif
"search in media base with rg
command! fzfinmedia :let $FZF_PICK = term('fzfsearchmedia.sh %a 2>/dev/tty')
                   \| if $FZF_PICK != ''
                   \|     execute 'goto' fnameescape($FZF_PICK)
                   \| endif
"search in pdf files with pdfgrep
"TODO - create preview
command! fzfinpdffiles :let $FZF_PICK = term('fzfsearchpdffiles.sh %a 2>/dev/tty')
                   \| if $FZF_PICK != ''
                   \|     execute 'goto' fnameescape($FZF_PICK)
                   \| endif
" toggle between sorting: by name <--> by size <--> by mtime
command! togglesort
         \ :if &sort == '-size,+name'
         \ |    set sort=+mtime
         \ |    echo 'Sorted by modification date'
         \ |elseif &sort == '+iname'
         \ |    set sort=-size
         \ |    echo 'Sorted by size'
         \ |else
         \ |    set sort=+iname
         \ |    echo 'Sorted by name'
         \ |endif
command! cmpinternal compare-cmd %a %S
"?????
command! cmp : if expand('%%c') == expand('%%f')
              \ |     echo expand('Comparing %%"c and %%"C:t ...')
              \ |     cmpinternal %c %C
              \ | else
              \ |     echo expand('Comparing files: %%"f ...')
              \ |     cmpinternal %f \ | endif
"}}}
"----Executing programms---------------{{{
"	 COMMON FILES
" .dotfiles
filetype /^[^.]+$/ vim
" fileviewer *[^/],.*[^/] bat %c -p
" TODO need color setup for bat
" Pdf
filextype {*.pdf},<application/pdf> zathura %c %i &
fileviewer *.pdf
        \ vifmimg pdf %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear
" PostScript
filextype {*.ps,*.eps,*.ps.gz},<application/postscript>
        \ {View in zathura}
        \ zathura %f,
" Djvu
filextype {*.djvu},<image/vnd.djvu>
        \ {View in zathura}
        \ zathura %f %i,
fileviewer *.djvu
	\ vifmimg djvu %px %py %pw %ph %c
	\ %pc
	\ vifmimg clear
"Comics Arch
filextype {*.cbz,*.cbr}
	\ {View in Mcomix}
	\ mcomix %c %i &,
"E-books Arch
filextype {*.epub,*.fb2,*.mobi,*.lit,*.azw3}
	\ {View in foliate}
	\ foliate %c %i &,
    \ {View in zathura}
    \ zathura %f %i &
fileviewer *.epub
        \ vifmimg epub %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear
" Audio
" filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,*.ogg},
        " \<audio/*>
	" \{Play using cmus}
	" \ urxvt -e cmus %f &,
       " \ {Play using ffplay}
       " \ ffplay -nodisp -autoexit %c,
       " \ {Play using MPlayer}
       " \ mplayer %f,
fileviewer {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,*.ogg} mediainfo
" Video
filextype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,*.m2ts,
        \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,*.m3u,
        \*.as[fx]},
        \<video/*>
        \ {View using mpv}
        \ mpv %f %i &,
        \ {View using vlc}
        \ vlc %f %i &,
        \ {View using ffplay}
        \ ffplay -fs -autoexit %f,
fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mpg,*.mpeg,*.vob,
           \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
           \*.as[fx]},
	\ mediainfo %c 2>&1
fileviewer {*.mkv} mkvscan.sh %c 2>&1
"vlc playlist
filextype {*.xspf} vlc %c %i &
"open in mkvtoolnix-gui
filextype {*.mkv,*.mp4} mkvtoolnix-gui %f %i &
"open mkv in inviska
filextype {*.mkv} /$HOME/.soft/Inviska_MKV_Extract-11.0-x86_64.AppImage %f %i &
" Fonts
fileviewer <font/*>
	\ vifmimg font %px %py %pw %ph %c
	\ %pc
	\ vifmimg clear
" Images
filextype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
        \ {View in sxiv}
        \ rifle_sxiv.sh %f %i,
        \ {View in gpicview}
        \ sxiv %f
fileviewer <image/*>
	\ vifmimg draw %px %py %pw %ph %c
	\ %pc
	\ vifmimg clear
" Web
filextype {*.html,*.htm},<text/html>
        \ {Open with firefox}
        \ firefox %f &,
        \ {Open with uzbl}
        \ uzbl-browser %f %i &,
filetype {*.html,*.htm},<text/html> links, lynx
" Drawio
filextype {*.drawio}
        \ {Open with drawio}
        \ drawio %f &,
" Office files
" WPS doc
filextype {*.wps,*.doc,*.rtf,*.wpt,*.docx,*.dotx,*.docm,*.dotm},
        \ /usr/lib/office6/wps %f %i &
" Libre doc
filextype {*.odt},
        \ libreoffice %f %i &
" WPS xls
filextype {*.et,*.xls,*.xlsx,*.dbf,*.prn,*.xltx,*.xla,*.ett,*.xlt,*.xlsm,*.csv,*.dif,*.xltm,*.xlam},
		\ /usr/lib/office6/et %f %i &
" Libre xls
filextype {*.ods,*.odp},
        \ libreoffice %f %i &
" filextype {*.odt,*.doc,*.docx,*.adoc,*.rtf,*.vsd,*.xls,*.xlsx,*.ods,*.odp,*.pptx,*.ppt,*.csv},
"          \<application/vnd.openxmlformats-officedocument.*,
"           \application/msword,
"           \application/vnd.ms-excel>
"         \ libreoffice %f %i &,
" 		\ /usr/lib/office6/et %f %i &
        " \ /usr/lib/office6/wps %f %i &
		" \ wps %f %i &
fileviewer {*.doc},<application/msword> catdoc %c
fileviewer {*.docx},
          \<application/
           \vnd.openxmlformats-officedocument.wordprocessingml.document>
         \ docx2txt.pl %f -
" Torrent
filetype {*.torrent},<application/x-bittorrent> qbittorrent %f &
fileviewer {*.torrent},<application/x-bittorrent> dumptorrent -v %c
" 3d models
filextype {*.stl},
        \ {View using f3d}
		\ /sbin/f3d %f &
"-------------------------------------------
" view contents of archive files on opening them
filetype *.7z,*.bz2,*.cab,*.cpio,*.deb,*.gz,
        \*.msi,*.pkg,*.rar,*.tar,*.tgz,*.xz,*.zip
        \ als %f | less
" put following rules before any other filetype and fileviewer groups
" filetype *.tar.gz,*.tgz,*.tar.bz,*.tbz,*.tar.bz2,*.tbz2,
"          \*.tar.Z,*.tZ,*.tar.lzo,*.tzo,*.tar.lz,*.tlz,*.tar.xz,*.txz,*.tar.7z,*.t7z,
"          \*.tar,
"          \*.zip,*.jar,*.war,*.rar,*.lha,*.lzh,
"          \*.alz,*.ace,*.a,*.arj,*.arc,
"          \*.rpm,*.deb,
"          \*.cab,
"          \*.gz,*.bz,*.bz2,
"          \*.Z,*.lzma,*.lzo,*.lz,*.xz,*.rz,*.lrz,*.7z,
"          \*.cpio
"          \ aunpack %f
" fileviewer *.tar.gz,*.tgz,*.tar.bz,*.tbz,*.tar.bz2,*.tbz2,
"          \*.tar.Z,*.tZ,*.tar.lzo,*.tzo,*.tar.lz,*.tlz,*.tar.xz,*.txz,*.tar.7z,*.t7z,
"          \*.tar,
"          \*.zip,*.jar,*.war,*.rar,*.lha,*.lzh,
"          \*.alz,*.ace,*.a,*.arj,*.arc,
"          \*.rpm,*.deb,
"          \*.cab,
"          \*.gz,*.bz,*.bz2,
"          \*.Z,*.lzma,*.lzo,*.lz,*.xz,*.rz,*.lrz,*.7z,
"          \*.cpio
"          \ als %f 2>/dev/null
" FuseZipMount
filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
        \<application/zip,application/java-archive>
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c
" ArchiveMount
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz},
        \<application/x-tar>
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer {*.tar},<application/x-tar> tar -tf %c
" Rar2FsMount and rar archives
filetype {*.rar},<application/x-rar>
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.rar},<application/x-rar> unrar v %c
" IsoMount
filetype {*.iso},<application/x-iso9660-image>
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,
" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,
" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,
" Fuse7z and 7z archives
filetype {*.7z},<application/x-7z-compressed>
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.7z},<application/x-7z-compressed> 7z l %c
" Traces
filextype {*.pcap,*.pcapng,*.pcapng.gz,*.pcap.gz}
	\ {View in wireshark}
	\ /usr/bin/wireshark %c %i &
" RDP
filextype {*.rdp}
    \ {open with remmina}
    \ remmina -c %c %i &
" Object
filetype {*.o},<application/x-object> nm %f | less
" Man page
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b
" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,
" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,
" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,
" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,
" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,
" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,
" GPG signature
filetype {*.asc},<application/pgp-signature>
       \ {Check signature}
       \ !!gpg --verify %c,
" TuDu files
filetype *.tudu tudu -f %c
" Qt projects
filextype *.pro qtcreator %f &
"}}}
"----Keyboard Mappings-------------{{{

"<wait> - will trigger pause
"<wait> has no effect for single-character mappings
"<silent> - not show command line execution

"Ctrl
nnoremap <C-f> <c-w>x
nnoremap <C-b> :sync<CR>
nnoremap <C-n> <Nop>
nnoremap <C-p> <Nop>
" nnoremap <C-t> :tabnew<cr>
" nnoremap <C-c> :tabclose<cr>
" nnoremap <C-p> gT
" nnoremap <C-n> gt
"moving between vifm & tmux
nnoremap <silent> <C-h> :if paneisat('left')   | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>
nnoremap <silent> <C-j> :if paneisat('bottom') | execute '!tmux select-pane -D %i' | else | execute 'wincmd j' | endif<cr>
nnoremap <silent> <C-k> :if paneisat('top')    | execute '!tmux select-pane -U %i' | else | execute 'wincmd k' | endif<cr>
nnoremap <silent> <C-l> :if paneisat('right')  | execute '!tmux select-pane -R %i' | else | execute 'wincmd l' | endif<cr>
" account for <c-h>/<bs> conflict
nnoremap <silent> <bs>  :if paneisat('left')   | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>
" Alt
" previous folders, NOT WORK
" nnoremap <A-p> [R
" nnoremap <A-n> ]R

" Other symbols
nnoremap - <C-w>5<
nnoremap _ <C-w>5>
nnoremap | <C-w>5=
nnoremap <space> tj
nnoremap ~ :help<cr>

" Alphabet
" PDF preview scrolling https://github.com/cirala/vifmimg
" map > :!vifmimg inc<cr>
" map < :!vifmimg dec<cr>

nnoremap <wait>af :select *.*<CR>
nnoremap <wait>aa :%select<CR>
" all to dir_name.tar.gz
nnoremap <wait>adgz :!tar -cvzf `basename $(pwd)`.tar.gz .<cr>
" selected to INSERT_NAME tar.gz
nnoremap <wait>angz :!tar -cvzf .tar.gz %f<left><left><left><left><left><left><left><left><left><left>
" all to dir_name.zip
nnoremap <wait>aza :!!zip -r -0 "$(basename "$(pwd)").zip" .<cr>
nnoremap <wait>azb :!!zip -r -e -0 "$(basename "$(pwd)").zip" .<cr>
" selected to INSERT_NAME zip
nnoremap <wait>azf :!zip -r  %f<left><left><left>
nnoremap <wait>by :yank | winrun , put<cr>
nnoremap <wait>bp :yank | winrun , put!<cr>
nnoremap <wait>bc :copy!<cr>
nnoremap <wait>bm :move!<cr>
nnoremap <wait>bj :jobs<cr>
nnoremap <wait>cx :!chmod +x %f<cr>
nnoremap <wait>ca :!config add %c<cr>
nnoremap <wait>cdca :cd /$HOME/.ansible/<cr>
nnoremap <wait>cdcc :cd /$HOME/.config<cr>
nnoremap <wait>cdcf :cd /$HOME/.config/vifm<cr>
nnoremap <wait>cdch :cd /$HOME/.ssh<cr>
nnoremap <wait>cdcs :cd /$HOME/.scripts<cr>
nnoremap <wait>cdcv :cd /$HOME/.vim<cr>
nnoremap <wait>cv1 :!!/$HOME/.scripts/medio_editing/switch_audio_and_subtitles_default.sh 2>&1<CR>
" nnoremap <wait>f <Nop>
nnoremap <wait>fc :fzfcd<cr> 
nnoremap <wait>ff :fzflocate<cr>
nnoremap <wait>fd :locate<space>
nnoremap <wait>fp :fzfinpdffiles<space>""<Left>
nnoremap <wait>ft :fzfinfiles<space>""<Left>
nnoremap <wait>fm :fzfinmedia<space>""<Left>
nnoremap <wait>fz :fzffind<cr> 
nnoremap <wait>gc :!!git clone<space>
" nnoremap <wait>gs :!!git status<CR>
nnoremap <wait>gb :!!git branch -a<CR>
nnoremap <wait>gm :!!git checkout<space>
nnoremap e :edit<cr>
nnoremap E :!vim %c<CR>
nnoremap i :file &<cr>l
nnoremap I :file<cr>
" nnoremap <wait>m <Nop>
nnoremap <wait>mb :!vim "$(basename "$(pwd)")"<CR>
nnoremap <wait>mf :touch<space>""<Left>
nnoremap <wait>md :mkdir<space>""<Left>
"diff for dir
nnoremap <wait>rd :!clear && diff -rq %d %D<cr>
nnoremap <wait>rr :!find . -iname "" -type f -exec rm -f {} \;<a-b><a-b><a-b><a-b><a-b><a-b><a-b><a-b><right>
nnoremap <wait>rm :!find . -type f -iname '*.' -exec bash -c 'mv "$1" .' - '{}' \;<a-b><a-b><a-b><a-b><a-b><a-b><a-b><a-b><a-b><a-b><right><right><right>
nnoremap <wait>rh :reg h<cr>b
nnoremap <wait>rsd :!!clear && rsync -avP --delete --dry-run %d/ %D | grep -E '^deleting|[^/]$'<cr>
nnoremap <wait>rsr :!!clear && rsync -avP --delete %d/ %D | grep -E '^deleting|[^/]$'<cr>
nnoremap <wait>rsfd :!!clear && rsync -urvP --delete --dry-run %d/ %D | grep -E '^deleting|[^/]$'<cr>
nnoremap <wait>rsfr :!!clear && rsync -urvP --delete %d/ %D | grep -E '^deleting|[^/]$'<cr>
nnoremap S :sort<cr>
nnoremap <wait>s1 :select *(1).mkv<cr>
nnoremap <wait>s2 :select *[^(1)].mkv<cr>
nnoremap <wait>s3 :select *.srt,*jpg,*.txt,*.m4a,*.ogg<CR>
nnoremap <wait>ss :set sort=+size<cr>
nnoremap <wait>sS :set sort=-size<cr>
nnoremap <wait>sn :set sort=+iname<cr>
nnoremap <wait>sN :set sort=-iname<cr>
nnoremap <wait>st :set sort=+mtime<cr>
nnoremap <wait>sT :set sort=-mtime<cr>
nnoremap <wait>sm :togglesort<cr>
nnoremap <wait>tl :!ls --group-directories-first -1R > $(basename $PWD)<cr>
nnoremap <wait>tp :!ls --group-directories-first -1R > move && mv move -f ~/Dropbox/Look.out.for.them.all/$(basename $PWD)<cr>
nnoremap <wait>td :!diff %c %C<cr>
nnoremap <wait>t1 :targetm<cr>:echo $VIMARGS<cr>
nnoremap <wait>t2 :target<space> ""<Left>
nnoremap <wait>t0 :echo $VIMARGS<cr>
nnoremap <wait>tm :!!mediainfo %c<cr>
nnoremap <wait>ti :!!mkvmerge -i %c<cr>
nnoremap w :view<cr>gs
nnoremap x :select *.<C-x>e<cr>
nnoremap X :unselect *.<C-x>e<cr>
" yank current directory path into the clipboard
nnoremap yd :!echo -n %d | xclip -selection clipboard %i<cr>:echo expand('%"d') "is yanked to clipboard"<cr>
" yank current file path into the clipboard
nnoremap yf :!echo -n %c:p | xclip -selection clipboard %i<cr>:echo expand('%"c:p') "is yanked to clipboard"<cr>
" yank current filename without path into the clipboard
nnoremap yn :!echo -n %c | xclip -selection clipboard %i<cr>:echo expand('%"c') "is yanked to clipboard"<cr>
" yank root of current file's name into the clipboard
nnoremap yr :!echo -n %c:r | xclip -selection clipboard %i<cr>:echo expand('%"c:r') "is yanked to clipboard"<cr>
" copy names of selected files into the clipboard
nnoremap yz :!printf "\n%%s" %f:p | tail -c+2 | xclip -selection clipboard %i<cr>
"yank to register h
noremap yu :normal "hyy<cr>
noremap yi :normal "Hyy<cr>

" go to previous tab page or move current tab page to position specified by the
" count
nnoremap <silent> gT : <C-u>
                    \| if v:count == 0
                    \|     execute 'normal gT'
                    \| elseif v:count > tabpagenr('$')
                    \|     tabmove
                    \| elseif v:count >= tabpagenr()
                    \|     execute 'tabmove' v:count
                    \| elseif v:count < tabpagenr()
                    \|     execute 'tabmove' v:count - 1
                    \| endif
                    \| <cr>

" cycle thru the layouts -- only, vsplit, and split
nnoremap ` :if layoutis('only')
                        \|    vsplit
                        \|elseif layoutis('vsplit')
                        \|    split
                        \|else
                        \|    only
                        \|endif<cr>

"Disable Execution on pressing lower case L 
nnoremap <silent> l : if filetype('.', 1) == 'dir'
                   \|     execute 'normal! l'
                   \| endif<cr>

"---Leader <,>
nnoremap <wait>,a :archive<Left>
nnoremap <wait>,b :!bash<cr>
nnoremap <wait>,cs :config status<cr>
nnoremap <wait>,ca :config add %c<cr>
nnoremap <wait>,cm :config commit -m ""<Left>
nnoremap <wait>,cp :config push<cr>
nnoremap <wait>,d :!!date<cr>
nnoremap <wait>,e :extract<CR>
nnoremap <wait>,m :marks<cr>
nnoremap <wait>,r :!sudo vifm %d %D<cr>
nnoremap <wait>,s :shell<cr>
nnoremap <wait>,t :!urxvt &<cr>
nnoremap <wait>,vh :split<cr>
nnoremap <wait>,vo :only<cr>
nnoremap <wait>,vv :vsplit<cr>
nnoremap <wait>,x :fzf<cr>
"priview long filenames
nnoremap <silent> ,p : if &previewprg == ''
                    \|     :vsplit
                    \|     :view
                    \|     set previewprg='echo %c%q'
                    \| else
                    \|     set previewprg=''
                    \| endif<cr>

" visual mode
vnoremap w :view<cr>gv
vnoremap yf :!printf "\n%%s" %f:p | tail -c+2 | xclip -selection clipboard %i<cr>:echo "filenames yanked to clipboard"<cr>

" command mode
cnoremap <C-q> <c-r>=system("date +%Y-%m-%d")<cr>

"_____Function keys______

nnoremap <f1> :!man<space>
nnoremap <f2> :set wrap!<cr>
nnoremap <f3> :set number!<cr>
nnoremap <f4> :set relativenumber!<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>""<Left>
nnoremap <f8> :delete<cr>
" nnoremap <f9> :write<cr> 
"????
nnoremap <f10> :set viewcolumns=*{name}..,6{}.<cr>
" brief information about files
nnoremap <f11> :set viewcolumns=*{name}.,10{perms},12{uname},-7{gname},10{size}.,20{mtime}<cr>
" detailed information about files
nnoremap <f12> :reload<cr>

"-----Arrows---
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>


"---- TESTING-------{{{




"}}}
