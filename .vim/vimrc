" ###########################################################
" ##########               VIMRC file by smy               ##
" ###########################################################

"----------Configuration-----------------------------{{{

" Bail out if something that ran earlier, e.g. a system wide vimrc, does not
" want Vim to use these default values.
if exists('skip_defaults_vim')
  finish
endif

filetype plugin indent on  " enable filetype recognitions and indent base on it

set nocompatible               " Use Vim settings, rather than Vi settings (much better!).
set viminfo=<1000,'1000,/50,:100,h,f1

set backspace=indent,eol,start  " Allow backspacing over everything in insert mode.
if has('unnamedplus')           " use the system register for everything
  set clipboard=unnamed,unnamedplus
endif
set display=truncate            " Show @@@ in the last line if it is truncated.
set encoding=utf-8              " Unicode encoding support
set foldcolumn=2                " width of fold column
set foldmethod=marker           " set folding mode
set hidden                      " Allow hidden buffers, don't limit to 1 file per window/split
set history=200		            " keep 200 lines of command line history
set hlsearch                    " Switch on highlighting the last used search pattern.
set ignorecase                  " set ignore small/capital for search
set incsearch                   " Display the match for a search pattern when halfway typing it
set laststatus=2                " show statusline always
set mouse=a                     " use mouse everywhere
set nrformats-=octal            " do not recognize octal numbers for ctrl-a and ctrl-x
set number relativenumber       " Show line numbers & relativenumber
" set ruler		                 " show the cursor position all the time
set scrolloff=5                 " Show a few lines of context around the cursor.
set sidescrolloff=5	        	" Vertical
set showcmd		               " display incomplete commands
set showmatch                 " When selecting a parenthesis it will highlight the one matching
set smartcase                   " set smartcase for search
" set splitbelow splitright
" set spell                     " set spellchecking
set spelllang=en_us,ru_ru
set statusline=%f%m%r%h%w\ [%Y]\ [0x%02.2B]%<\ %F%=%4v,%4l\ of\ %L\ %3p%%
" set termguicolors               " colors to term
set ttimeout		            " time out for key codes
set ttimeoutlen=500	            " wait up to 500ms after Esc for special key
set vb "disable beep sound
set wildmenu		            " display completion matches in a status line
set wildmode=longest,list,full  " wildmode insertions
syntax enable                   " Switch syntax highlighting on
filetype on

"Autosave & swap
set autowriteall		" This will save the file when you switch buffers, make it etc.
						"autosave everything with ignoring warnings from untitled buffers,
						"and read-only files, etc
autocmd FocusLost * silent! wa
" TextChangedI - save everytime in insert mode!!!
" autocmd TextChanged,TextChangedI * silent! write
autocmd TextChanged * silent! write
set nobackup
set noswapfile
set undofile " Maintain undo history
set undodir=~/.vim/undodir
set undolevels=10000     " Maximum number of changes that can be undone
set undoreload=10000

"Langmap for Russian layout
"no <">, <?>, <;>, </> - try to find way to write in codes
" set langmap=!№%*ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕHГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ;!#%*`qwertyuiop[]asdfghjkl\\;'zxcvbnm\\,.~QWERTYUIOP{}ASDFGHJKL:\\"ZXCVBNM<>
" set nolangremap
set keymap=russian-jcukenwin
set iminsert=0 " Чтобы при старте ввод был на английском, а не русском (start > i)
set imsearch=0 " Чтобы при старте поиск был на английском, а не русском (start > /)
"switch C-^

"Tabs and Indent

set autoindent         "when creating a new line, copy the indentation from the line above
set copyindent         "copy the previous indentation on autoindenting
set smartindent      "Do smart autoindenting when starting a new line.
" set expandtab        " [I] < > instead Tab. Real tab -> CTRL-V<Tab>.
set noexpandtab        "don't expand tabs to spaces by default
set smarttab           "when deleting whitespace at the beginning of a line, delete 1 tab worth of spaces
set shiftwidth=4       "Number of spaces to use for each step of (auto)indent
set shiftround         "Use multiple of shiftwidth when indenting with '<' and '>'
set softtabstop=4      "Number of spaces that a <Tab> counts for while performing editing operations
set tabstop=4          "Number of spaces that a <Tab> in the file counts for.
set wrap               "Wrap lines
set linebreak

set nolist
set listchars=tab:»-,space:·,nbsp:~,trail:-,eol:$
" highlight SpecialKey ctermfg=8 guifg=DimGrey
" highlight SpecialKey ctermfg=14 guifg=Yellow

" white space characters
" set nolist
" compatible space chars
" set listchars=eol:$,tab:.\ ,trail:.,extends:>,precedes:<,nbsp:_
" incompatible with debian stretch
"set listchars=eol:↓,tab:\ \ ┊,trail:●,extends:…,precedes:…,space:·
" highlight SpecialKey term=standout ctermfg=darkgray guifg=darkgray

" Ignoring file types from autocomplition:
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png

"Cursor Cross
"must add right color scheme OR experement with set guicolor
set cursorline
set cursorcolumn
highlight CursorLine ctermbg=Yellow cterm=bold guibg=#f9ed07
" highlight CursorColumn ctermbg=Yellow cterm=bold guibg=#000000
" colorsheme XXXXXXXXXXXXXXXx

"Remove pipes | that act as separators on slits
set fillchars+=vert:\

" MArkdown
let g:markdown_folding = 1
"}}}
"----------Autocmd------------{{{

" textwidth = 78
augroup vimrcEx
  au!
  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
augroup END

"cursor position
augroup vimStartup
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
augroup END
" Put these in an autocmd group, so that you can revert them with:
" ":augroup vimStartup | au! | augroup END"

" Make views automatic !!!!!!!!!!!!!
autocmd BufWinLeave *.* mkview!
autocmd BufWinEnter *.* silent loadview
" autocmd BufWinLeave * if expand("%") != "" | mkview | endif
" autocmd BufWinEnter * if expand("%") != "" | loadview | endif
" autocmd BufWinLeave ?* mkview!
" autocmd BufWinEnter ?* silent loadview

" Highlight cursorline ONLY in the active window:
au WinEnter * setlocal cursorline
au WinLeave * setlocal nocursorline

" #NERDTree
" https://mr-destructive.github.io/techstructive-blog/vim-nerdtree/
" Open nerdtree window on opening Vim
" autocmd VimEnter * NERDTree

" Refresh the current folder if any changes
autocmd BufEnter NERD_tree_* | execute 'normal R'
au CursorHold * if exists("t:NerdTreeBufName") | call <SNR>15_refreshRoot() | endif

"Reload the window if directory is changed
augroup DIRCHANGE
    au!
    autocmd DirChanged global :NERDTreeCWD
augroup END

"Close nerdtree automatically if it is theonly window open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"remove whitespaces on save
" autocmd BufWritePre * :%s/\s\+$//e

" Filetype autocmd
" autocmd BufReadPost,BufNewFile,BufRead  *.txt  set filetype=txt

" autocmd BufEnter diary.wiki :VimwikiDiaryGenerateLinks

" Working projects
" ansible inventory yaml
autocmd BufRead,BufNewFile ~/Git/*/inventory/* set filetype=yaml
autocmd BufRead,BufNewFile ~/Git/*/*/group_vars/* set filetype=yaml

" }}}
"--------- PLUGINS & FILES {{{

" VIM-PLUG
" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" Declare the list of plugins.
Plug 'brianrodri/vim-sort-folds'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dpelle/vim-LanguageTool'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'liuchengxu/vim-which-key'
Plug 'mattn/calendar-vim'
Plug 'preservim/nerdtree'
Plug 'romainl/vim-qf'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-speeddating' 
Plug 'tpope/vim-unimpaired'
Plug 'vimwiki/vimwiki'
" List ends here. Plugins become visible to Vim after this call.
call plug#end()
"____________ Vimwiki_____________________________
let g:vimwiki_folding='expr'
let g:vimwiki_global_ext = 0
let g:vimwiki_hl_headers = 1
let g:vimwiki_conceal_pre = 1
let g:vimwiki_url_maxsave = 0
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
" let g:vimwiki_nested_syntaxes = {'python': 'python', 'bash':'bash', 'sql':'sql', 'msql':'msql', 'git':'git',
"             \'gitcommit':'gitcommint', 'vim':'vim', 'viminfo':'viminfo', 'c':'c', 'c++': 'cpp', 'conf':'conf',
"             \'config':'config', 'cfg':'cfg', 'cmake':'cmake', 'diff':'diff', 'zsh':'zsh',
"             \'xdefaults':'xdefaults'}
" Final exp
let g:vimwiki_root = '~/Vimwiki'
let g:vimwiki_list = [
            \{'path': '~/Vimwiki/linux2', 'syntax': 'markdown', 'ext':'.md', 'auto_toc': 1},
            \{'path': '~/Vimwiki/server', 'syntax': 'markdown', 'ext':'.md', 'auto_toc': 1},
            \{'path': '~/Vimwiki/work', 'syntax': 'markdown', 'ext':'.md', 'auto_toc': 1},
            \{'path': '~/Vimwiki/soft', 'syntax': 'markdown', 'ext':'.md', 'auto_toc': 1},
            \{'path': '~/Vimwiki', 'syntax': 'markdown', 'ext': '.md', 'auto_toc': 1},
            \{'path': '~/Vimwiki/study', 'syntax': 'markdown', 'ext':'.md', 'auto_toc': 1},
            \{'path': '~/Vimwiki/hardware', 'syntax': 'markdown', 'ext':'.md', 'auto_toc': 1},
            \{'path': '~/Vimwiki/culture', 'syntax': 'markdown', 'ext':'.md', 'auto_toc': 1},
            \{'path': '~/Vimwiki/life', 'syntax': 'markdown', 'ext':'.md', 'auto_toc': 1}]

command! Diary exe 'VimwikiDiaryIndex' | exe 'norm ggdGo' | exe 'VimwikiDiaryGenerateLinks' | exe 'norm zR'
" auto_diary_index - dos't work!! wait for update
"-----------------------------
"
"NERDTRee
"
let NERDTreeStatusline="%{exists('b:NERDTree')?fnamemodify(b:NERDTree.root.path.str(), ':~'):''}"
let NERDTreeShowHidden=1

"Languagetool
" not work with modern version of Languagetool
" https://github.com/dpelle/vim-LanguageTool/issues/33
" now must use unzip version 5.9
let g:languagetool_jar='/home/freeman/Soft/LanguageTool-5.9/languagetool-commandline.jar'
" for archlinux
" let g:languagetool_cmd='/sbin/languagetool'
" let g:languagetool_cmd='java -jar /usr/share/java/languagetool/languagetool-commandline.jar'

"}}}
"----------Add optional packages.-----------{{{

" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

" }}}
"----------Commands-------------------------{{{
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
" }}}
" ----------Funtions----------{{{

" Wrap mode, move cursor by display lines when wrappong

function ToggleWrap()
  if &wrap
    echo "Wrap OFF"
    setlocal nowrap
    " set virtualedit=all
    silent! nunmap <buffer> k
    silent! nunmap <buffer> j
    silent! vunmap <buffer> k
    silent! vunmap <buffer> j
    silent! nunmap <buffer> 0
    silent! nunmap <buffer> $
    silent! nunmap <buffer> <Home>
    silent! nunmap <buffer> <End>
  else
    echo "Wrap ON"
    setlocal wrap linebreak
    " set virtualedit=
    " setlocal display+=lastline
    noremap <buffer> <silent> k gk
    noremap <buffer> <silent> j gj
    noremap <buffer> <silent> 0 g0
    noremap <buffer> <silent> $ g$
    vnoremap <buffer> <silent> j gj
    vnoremap <buffer> <silent> k gk
    noremap <buffer> <silent> <Home> g<Home>
    noremap <buffer> <silent> <End>  g<End>
  endif
endfunction

" fonts for gvim
" let g:fnt_types = ['SourceCode\ Pro', 'monofur' ]
" let g:fnt_sizes = [ 10, 13 ]

" let g:fnt_index = 0
" let g:fnt_size  = g:fnt_sizes[g:fnt_index]

" function! CycleFont()
"   let g:fnt_index = (g:fnt_index + 1) % len(g:fnt_types)
"   let g:fnt_size  = g:fnt_sizes[g:fnt_index]
"   call ResetFont()
" endfunction

" function! ResetFont ()
"   if has('gui_running')
"     exe ':set guifont=' . g:fnt_types[g:fnt_index] . '\ ' . string(g:fnt_size)
"   endif
" endfunction

" call ResetFont()

" function! FontSizePlus ()
"   let g:fnt_size = g:fnt_size + 0.5
"   call ResetFont()
" endfunction

" function! FontSizeMinus ()
"   let g:fnt_size = g:fnt_size - 0.5
"   call ResetFont()
" endfunction

" nnoremap <leader>+ :call FontSizePlus()<cr>
" nnoremap <leader>- :call FontSizeMinus()<cr>
" nnoremap cot :call CycleFont()<cr>

" Another version of font switch for gui

if has("unix")
    function! FontSizePlus ()
      let l:gf_size_whole = matchstr(&guifont, '\( \)\@<=\d\+$')
      let l:gf_size_whole = l:gf_size_whole + 1
      let l:new_font_size = ' '.l:gf_size_whole
      let &guifont = substitute(&guifont, ' \d\+$', l:new_font_size, '')
    endfunction

    function! FontSizeMinus ()
      let l:gf_size_whole = matchstr(&guifont, '\( \)\@<=\d\+$')
      let l:gf_size_whole = l:gf_size_whole - 1
      let l:new_font_size = ' '.l:gf_size_whole
      let &guifont = substitute(&guifont, ' \d\+$', l:new_font_size, '')
    endfunction
else
    function! FontSizePlus ()
      let l:gf_size_whole = matchstr(&guifont, '\(:h\)\@<=\d\+$')
      let l:gf_size_whole = l:gf_size_whole + 1
      let l:new_font_size = ':h'.l:gf_size_whole
      let &guifont = substitute(&guifont, ':h\d\+$', l:new_font_size, '')
    endfunction

    function! FontSizeMinus ()
      let l:gf_size_whole = matchstr(&guifont, '\(:h\)\@<=\d\+$')
      let l:gf_size_whole = l:gf_size_whole - 1
      let l:new_font_size = ':h'.l:gf_size_whole
      let &guifont = substitute(&guifont, ':h\d\+$', l:new_font_size, '')
    endfunction
endif

" Wrap visual selection in an JIRA {noformat} tag.
vmap <Leader>w <Esc>:call VisualHTMLTagWrap()<CR>
function! VisualHTMLTagWrap()
  " let tag = input("Tag to wrap block: ")
  let tag = 1
  if len(tag) > 0
    normal `>
    if &selection == 'exclusive'
      exe "normal o{noformat}"
    else
      " exe "normal o</".tag.">"
      exe "normal o{noformat}"
    endif
    normal `<
    exe "normal O{noformat}"
    " exe "normal O<".tag.">"
    normal `<
  endif
endfunction

" }}}
"----------THEMES & COLORS----------------{{{

" set termguicolors "use true color

" fold color
" hi Folded cterm=bold ctermfg=DarkBlue ctermbg=none
" hi FoldColumn cterm=bold ctermfg=DarkBlue ctermbg=none

" search color
highlight Search ctermbg=3 ctermfg=0 cterm=none

"set cursorline
set cursorline
highlight CursorLine ctermbg=7 cterm=none

"---Solarized----

" set background=light
" let g:solarized_termcolors=256
" let g:solarized_contrast="high"
" colorscheme solarized

"}}}
"----------KEYMAPPINGS-------------------------{{{
"^^^^^^^^main^^^^^^^^^^^^^^^
" Don't use Ex mode, use Q for formatting.
" Revert with ":unmap Q".
map Q gq
nnoremap Y y$

"^^^^^Leader mapping & WhichKey^^^^
let g:mapleader = "\<Space>"
let g:maplocalleader = ','
nnoremap <silent> <leader>      :<C-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :<C-u>WhichKey  ','<CR>
vnoremap <silent> <leader> :<C-u>WhichKeyVisual '<Space>'<CR>
call which_key#register('<Space>', "g:which_key_map", 'n')
call which_key#register('<Space>', "g:which_key_map_visual", 'v')
let g:which_key_map =  {}
let g:which_key_map['e'] = {
        \ 'name' : 'rename files' ,
		\ '1' : [':% norm /\(19\|20\)\d\{2}/yw0Pa - ', 'move movies date to begining'],
		\ '2' : [':% norm 0df]$p0x', 'move anime group to end'],
		\ '3' : [':%s/.zip/.cbz/g', 'rename zip to cbz'],
		\ '4' : [':%s/.rar/.cbr/g', 'rename rar to cbr'],
		\ }
let g:which_key_map['d'] = {
        \ 'name' : 'NERDTree' ,
		\ 'd' : [':NERDTreeToggle', 'Open NERDTree'],
		\ 'f' : [':NERDTreeFind', 'NERDTree to current file'],
		\ 'c' : [':NERDTreeCWD', 'NERDTree to current dir'],
		\ }
nnoremap <leader>cc @='i```<C-V><Enter><C-V><Enter><C-V><Enter><C-V><Enter>```<C-V><Esc>'<CR>
nnoremap <leader>cb @='i```bash<C-V><Enter><C-V><Enter><C-V><Enter><C-V><Enter>```<C-V><Esc>'<CR>
nnoremap <leader>cp @='i```python<C-V><Enter><C-V><Enter><C-V><Enter><C-V><Enter>```<C-V><Esc>'<CR>
nnoremap <leader>cs @='i```sql<C-V><Enter><C-V><Enter><C-V><Enter><C-V><Enter>```<C-V><Esc>'<CR>
nnoremap <leader>cg @='i```git<C-V><Enter><C-V><Enter><C-V><Enter><C-V><Enter>```<C-V><Esc>'<CR>
nnoremap <leader>cv @='i```vim<C-V><Enter><C-V><Enter><C-V><Enter><C-V><Enter>```<C-V><Esc>'<CR>
nnoremap <leader>ct :VimwikiTOC<CR>
let g:which_key_map['c'] = {
        \ 'name' : 'code block' ,
		\ 'c' : 'quotes blank',
		\ 'b' : 'bash',
		\ 'p' : 'python',
		\ 's' : 'sql',
		\ 'g' : 'git',
		\ 'v' : 'vim',
		\ 't' : 'VimwikiTOC',
		\ }
nnoremap <Leader>ft @='ciW**<C-V><C-R>"**<C-V><Esc>w'<CR>
nnoremap <Leader>fb :exe "norm I**" <bar> exe "norm A**"<CR>
nnoremap <Leader>fi @='ciW_<C-V><C-R>"_<C-V><Esc>w'<CR>
nnoremap <Leader>fI :exe "norm I_" <bar> exe "norm A_"<CR>
nnoremap <Leader>fc @='ciW`<C-V><C-R>"`<C-V><Esc>w'<CR>
nnoremap <Leader>fC :exe "norm I`" <bar> exe "norm A`"<CR>
nnoremap <Leader>fe @='ciW[[#<C-V><C-R>"]]<C-V><Esc>w'<CR>
nnoremap <leader>fp :let a = ['</pre>', '<pre>'] <bar> %s/{noformat}/\=reverse(a)[0]/g<CR>
let g:which_key_map['f'] = {
        \ 'name' : 'text format' ,
		\ 't' : 'world in bold',
		\ 'b' : 'line in bold',
		\ 'i' : 'world in cursive',
		\ 'I' : 'line in cursive',
		\ 'c' : 'world in quotes',
		\ 'C' : 'line in quotes',
		\ 'e' : '[[#]]',
		\ 'p' : 'noformat to pre',
		\ }

"quickly fix spelling mistakes [gets rid of spellchecking]
nnoremap <Leader>fs 1z=
"shell check
" using https://www.shellcheck.net/ - install first
nnoremap <leader>S :!clear && shellcheck %<CR>
nnoremap <leader>b <Plug>VimwikiGoBackLink
nnoremap <leader>ds1 "=strftime("%Y-%m-%d %H:%M:%S")<CR>P
nnoremap <leader>ds2 "=strftime("%Y-%m-%d")<CR>P
nnoremap <leader>h :split<CR>
nnoremap <leader>j J
nnoremap <leader>l :ls<CR>:b<space>
nnoremap <leader>lc :LanguageToolCheck<CR>
nnoremap <leader>lo :LanguageToolClear<CR>
nnoremap <leader>ma :vim /$alt+\\|<A-\\|Altmap\\|M-/ ~/.config/i3/config ~/.config/vifm/vifmrc ~/.config/tmux/tmux.conf ~/.vim/vimrc<CR>
nnoremap <leader>mc :vim /<C-/ ~/.config/i3/config ~/.config/vifm/vifmrc ~/.config/tmux/tmux.conf ~/.vim/vimrc<CR>
nnoremap <leader>ms :vim /<S-\\|S-/ ~/.config/i3/config ~/.config/vifm/vifmrc ~/.config/tmux/tmux.conf ~/.vim/vimrc<CR>
nnoremap <leader>o :only<CR>
nnoremap <leader>p :b#<CR>
nnoremap <leader>q :silent !xdg-open <C-R>=escape("<C-R><C-F>", "#?&;\|%")<CR><CR> :redraw!<CR>
nnoremap <leader>rc :e $MYVIMRC<CR>
nnoremap <leader>rr :source ~/.vim/vimrc<CR>
nnoremap <leader>se :vim //jg ***<Left><Left><Left><Left><Left><Left><Left>
nnoremap <leader>sq :%s:::g<Left><Left><Left>
nnoremap <leader>sr :cfdo %s:::gc<Left><Left><Left><Left>
nnoremap <leader>st :/^\*\*\*\*$<Left><Left><Left><Left><Left>
nnoremap <leader>su :w !sudo tee % <CR><CR>
nnoremap <leader>sw :%s:::cg<Left><Left><Left><Left>
nnoremap <leader>v :vsplit<CR>
nnoremap <leader>wc :Calendar<CR>
nnoremap <leader>wd :Diary<CR>
nnoremap <leader>wg <Plug>VimwikiGoto
nnoremap <leader>wn <Plug>VimwikiMakeDiaryNote
nnoremap <leader>wp <Plug>VimwikiDiaryIndex
nnoremap <leader>wt <Plug>VimwikiMakeTomorrowDiaryNote
nnoremap <leader>wu <Plug>VimwikiDiaryGenerateLinks
nnoremap <leader>wx <Plug>VimwikiDeleteFile
nnoremap <leader>wy <Plug>VimwikiMakeYesterdayDiaryNote
nnoremap <leader>x :close<CR>
" refocus folds; close any other fold except the one that you are on
nnoremap <leader>z zMzvzz

"Esc
nnoremap <silent> <Esc><Esc> <Esc>:nohlsearch<CR><Esc>
nnoremap <Tab> >>

" Ctrl mapping
" Ctrl-n/m deletes blank line below/above
nnoremap <silent><C-m> m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <silent><C-n> m`:silent +g/\m^\s*$/d<CR>``:noh<CR>

" ALT mappings
if !has('gui_running')
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    " can break <esc> mapping in isert mode - switch from 0 to 200
    autocmd InsertEnter * set timeoutlen=200
    autocmd InsertLeave * set timeoutlen=2000
  augroup END
endif
 
function! Altmap(char)
  if has('gui_running') | return ' <A-'.a:char.'> ' | else | return ' <Esc>'.a:char.' '|endif
endfunction
 
" Make adjusing split sizes a bit more friendly
execute 'nnoremap <silent>'.Altmap('n').':vertical resize +3<CR>'
execute 'nnoremap <silent>'.Altmap('m').':vertical resize -3<CR>'
execute 'nnoremap <silent>'.Altmap('p').':resize -3<CR>'
execute 'nnoremap <silent>'.Altmap(';').':resize +3<CR>'
" Alt-i/o insert blank line below/above
execute 'nnoremap <silent>'.Altmap('o').':set paste<CR>m`O<Esc>``:set nopaste<CR>'
execute 'nnoremap <silent>'.Altmap('i').':set paste<CR>m`o<Esc>``:set nopaste<CR>'
"Moving tabs
execute 'nnoremap <silent>'.Altmap('r').':tabm -1<CR>'
execute 'nnoremap <silent>'.Altmap('t').':tabm +1<CR>'
"select all
execute 'nnoremap <silent>'.Altmap('q').'ggVG'

"Shift mapping
" move to previos tab
nnoremap <S-h> gT
" move to next tab
nnoremap <S-l> gt
nnoremap <S-Tab> <<
nnoremap <S-j> :bnext<CR>
nnoremap <S-k> :bprev<CR>

" disable arrows
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

"^^^^^^^^^Function keys^^^^^^^^^^^^
nnoremap <F1> :set spell!<CR>
"enable/disable spellchecking
nnoremap <F2> :set relativenumber!<CR>
"enable/disable relativenumber
nnoremap <F3> :set foldopen-=search \| set foldopen<CR>
" turn off folder search
nnoremap <F4> :set foldopen+=search \| set foldopen<CR>
" turn on folder search
nnoremap <F5> :set list! list?<CR>
" turn on/off list
nnoremap <F6> :call ToggleWrap()<CR>
nnoremap <F7> :set fileencodings=uft-8,cp1251<CR>:e<CR>
" nnoremap <F8> :sbnext<CR>
nnoremap <F8> :set invpaste paste?<CR>
set pastetoggle=<F8>


" ^^^^^COMAND MODE^^^^^
"????????
" cmap ;\ \(\)<Left><Left>

"^^^^^^ INSERT MODE^^^^^^
inoremap <F5> <C-R>=strftime("%Y-%m-%d %H:%M:%S")<CR>
inoremap <F6> <C-R>=strftime("%Y-%m-%d")<CR>
"switch to rus lang
inoremap <C-l> <c-^>
" inoremap ;; <c-3>
inoremap ;; <esc>

"^^^^^VISUAL MODE^^^^^
vmap <leader>w <Esc>:call VisualHTMLTagWrap()<CR>

 
" }}}
" ----------TEST--------- {{{



"  }}}

